{
  "version": 3,
  "sources": ["../../src/namespaces/product.ts"],
  "sourcesContent": ["import { GadgetConnection } from \"@gadgetinc/api-client-core\";\nimport { buildGlobalAction } from \"./../builder.js\";\n\n/** The product namespace */\nexport class ProductNamespace {\n  /** Executes the getVariantsByproduct global action. */\n  getVariantsByproduct = buildGlobalAction(this, {\n                       type: 'globalAction',\n                       functionName: 'getVariantsByproduct',\n                       operationName: 'getVariantsByproduct',\n                       operationReturnType: 'ProductGetVariantsByproduct',\n                       namespace: 'product',\n                       variables: {}\n                     } as const) as unknown as {\n                     (): Promise<any>;\n                     type: 'globalAction';\n                     operationName: 'getVariantsByproduct';\n                     operationReturnType: 'ProductGetVariantsByproduct';\n                     namespace: 'product';\n                     typesImports: [];\n                     variables: {};\n                     variablesType: Record<string, never>;\n                   };\n  /** Executes the readMetafieldByProduct global action. */\n  readMetafieldByProduct = buildGlobalAction(this, {\n                       type: 'globalAction',\n                       functionName: 'readMetafieldByProduct',\n                       operationName: 'readMetafieldByProduct',\n                       operationReturnType: 'ProductReadMetafieldByProduct',\n                       namespace: 'product',\n                       variables: {}\n                     } as const) as unknown as {\n                     (): Promise<any>;\n                     type: 'globalAction';\n                     operationName: 'readMetafieldByProduct';\n                     operationReturnType: 'ProductReadMetafieldByProduct';\n                     namespace: 'product';\n                     typesImports: [];\n                     variables: {};\n                     variablesType: Record<string, never>;\n                   };\n  /** Executes the readProductBySwatchId global action. */\n  readProductBySwatchId = buildGlobalAction(this, {\n                       type: 'globalAction',\n                       functionName: 'readProductBySwatchId',\n                       operationName: 'readProductBySwatchId',\n                       operationReturnType: 'ProductReadProductBySwatchId',\n                       namespace: 'product',\n                       variables: {}\n                     } as const) as unknown as {\n                     (): Promise<any>;\n                     type: 'globalAction';\n                     operationName: 'readProductBySwatchId';\n                     operationReturnType: 'ProductReadProductBySwatchId';\n                     namespace: 'product';\n                     typesImports: [];\n                     variables: {};\n                     variablesType: Record<string, never>;\n                   };\n  /** Executes the updateProductStatus global action. */\n  updateProductStatus = buildGlobalAction(this, {\n                       type: 'globalAction',\n                       functionName: 'updateProductStatus',\n                       operationName: 'updateProductStatus',\n                       operationReturnType: 'ProductUpdateProductStatus',\n                       namespace: 'product',\n                       variables: {}\n                     } as const) as unknown as {\n                     (): Promise<any>;\n                     type: 'globalAction';\n                     operationName: 'updateProductStatus';\n                     operationReturnType: 'ProductUpdateProductStatus';\n                     namespace: 'product';\n                     typesImports: [];\n                     variables: {};\n                     variablesType: Record<string, never>;\n                   };\n\n  connection: GadgetConnection;\n  constructor(readonly clientOrParent: { connection: GadgetConnection }) {\n    this.connection = this.clientOrParent.connection as GadgetConnection;\n\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,qBAAkC;AAG3B,MAAM,iBAAiB;AAAA,EA2E5B,YAAqB,gBAAkD;AAAlD;AAzErB;AAAA,oCAAuB,kCAAkB,MAAM;AAAA,MAC1B,MAAM;AAAA,MACN,cAAc;AAAA,MACd,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,WAAW,CAAC;AAAA,IACd,CAAU;AAW7B;AAAA,sCAAyB,kCAAkB,MAAM;AAAA,MAC5B,MAAM;AAAA,MACN,cAAc;AAAA,MACd,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,WAAW,CAAC;AAAA,IACd,CAAU;AAW7B;AAAA,qCAAwB,kCAAkB,MAAM;AAAA,MAC3B,MAAM;AAAA,MACN,cAAc;AAAA,MACd,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,WAAW,CAAC;AAAA,IACd,CAAU;AAW7B;AAAA,mCAAsB,kCAAkB,MAAM;AAAA,MACzB,MAAM;AAAA,MACN,cAAc;AAAA,MACd,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,WAAW,CAAC;AAAA,IACd,CAAU;AAa3B,SAAK,aAAa,KAAK,eAAe;AAAA,EAExC;AACF;",
  "names": []
}
