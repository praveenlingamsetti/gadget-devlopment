{"version":3,"sources":["/var/gadget/codegen/framework-1729658840843-gRxkn5/src/vite/utils.ts"],"sourcesContent":["import { BuildDirectory } from \"../remix/constants\";\nimport { FrontendType } from \"./helpers\";\n\nconst getDefaultProductionBaseUrl = (assetsBucketDomain: string, applicationId: string, productionEnvironmentId: string): string => {\n  return `https://${assetsBucketDomain}/a/${applicationId}/${productionEnvironmentId}`;\n};\n/** A descriptor object that describes how different Gadget frontend types work for our use when building vite configs */\ntype InternalFrontendConfig = {\n  distPath: string;\n  manifestFilePath: string;\n  productionBaseUrl: (assetsBucketDomain: string, applicationId: string, productionEnvironmentId: string) => string;\n};\n\nexport const BaseRemixFrontendConfig: InternalFrontendConfig = {\n  distPath: `${BuildDirectory}/client`,\n  manifestFilePath: `${BuildDirectory}/.vite/client-manifest.json`,\n  productionBaseUrl: (assetsBucketDomain: string, applicationId: string, productionEnvironmentId: string) => {\n    return `${getDefaultProductionBaseUrl(assetsBucketDomain, applicationId, productionEnvironmentId)}/`;\n  },\n};\n\nexport const BaseViteFrontendConfig: InternalFrontendConfig = {\n  distPath: \".gadget/vite-dist\",\n  manifestFilePath: \".gadget/vite-dist/manifest.json\",\n  productionBaseUrl: getDefaultProductionBaseUrl,\n};\n\n/**\n * Get the frontend config for the given framework type.\n */\nexport const getInternalFrontendConfig = (frameworkType: FrontendType): InternalFrontendConfig => {\n  switch (frameworkType) {\n    case FrontendType.Remix:\n      return BaseRemixFrontendConfig;\n\n    case FrontendType.Vite:\n      return BaseViteFrontendConfig;\n\n    default:\n      throw new Error(`Unknown frontend type detected: ${frameworkType}`);\n  }\n};\n\n/**\n * Get the frontend type from the given indicator file content.\n */\nexport const getFrontendType = (indicatorFileContent: string): FrontendType => {\n  if (Object.values(FrontendType).includes(indicatorFileContent as any)) {\n    return indicatorFileContent as FrontendType;\n  }\n\n  throw new Error(`Unknown frontend type detected: ${indicatorFileContent}`);\n};\n"],"names":["BaseRemixFrontendConfig","BaseViteFrontendConfig","getFrontendType","getInternalFrontendConfig","getDefaultProductionBaseUrl","assetsBucketDomain","applicationId","productionEnvironmentId","distPath","BuildDirectory","manifestFilePath","productionBaseUrl","frameworkType","FrontendType","Remix","Vite","Error","indicatorFileContent","Object","values","includes"],"mappings":";;;;;;;;;;;IAaaA,uBAAuB;eAAvBA;;IAQAC,sBAAsB;eAAtBA;;IAyBAC,eAAe;eAAfA;;IAhBAC,yBAAyB;eAAzBA;;;2BA9BkB;yBACF;AAE7B,MAAMC,8BAA8B,CAACC,oBAA4BC,eAAuBC;IACtF,OAAO,CAAC,QAAQ,EAAEF,mBAAmB,GAAG,EAAEC,cAAc,CAAC,EAAEC,yBAAyB;AACtF;AACA,uHAAuH,GAOhH,MAAMP,0BAAkD;IAC7DQ,UAAU,GAAGC,yBAAc,CAAC,OAAO,CAAC;IACpCC,kBAAkB,GAAGD,yBAAc,CAAC,2BAA2B,CAAC;IAChEE,mBAAmB,CAACN,oBAA4BC,eAAuBC;QACrE,OAAO,GAAGH,4BAA4BC,oBAAoBC,eAAeC,yBAAyB,CAAC,CAAC;IACtG;AACF;AAEO,MAAMN,yBAAiD;IAC5DO,UAAU;IACVE,kBAAkB;IAClBC,mBAAmBP;AACrB;AAEA;;CAEC,GACM,MAAMD,4BAA4B,CAACS;IACxC,OAAQA;QACN,KAAKC,qBAAY,CAACC,KAAK;YACrB,OAAOd;QAET,KAAKa,qBAAY,CAACE,IAAI;YACpB,OAAOd;QAET;YACE,MAAM,IAAIe,MAAM,CAAC,gCAAgC,EAAEJ,eAAe;IACtE;AACF;AAEA;;CAEC,GACM,MAAMV,kBAAkB,CAACe;IAC9B,IAAIC,OAAOC,MAAM,CAACN,qBAAY,EAAEO,QAAQ,CAACH,uBAA8B;QACrE,OAAOA;IACT;IAEA,MAAM,IAAID,MAAM,CAAC,gCAAgC,EAAEC,sBAAsB;AAC3E"}